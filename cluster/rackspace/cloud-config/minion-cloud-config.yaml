#cloud-config

write_files:
  - path: /opt/bin/regen-apiserver-list.sh
    permissions: 0755
    content: |
      #!/bin/sh
      m=$(echo $(etcdctl ls --recursive /corekube/apiservers | cut -d/ -f4 | sort) | tr ' ' ,)
      mkdir -p /run/kubelet
      echo "APISERVER_IPS=$m" > /run/kubelet/apiservers.env
      echo "FIRST_APISERVER_URL=http://${m%%\,*}:6443" >> /run/kubelet/apiservers.env
  - path: /opt/bin/download-release.sh
    permissions: 0755
    content: |
      #!/bin/bash
      # This temp URL is only good for the length of time specified at cluster creation time.
      # Afterward, it will result in a 403.
      OBJECT_URL="CLOUD_FILES_URL"
      if [ ! -s /opt/kubernetes.tar.gz ]
      then
        echo "Downloading release ($OBJECT_URL)"
        wget "${OBJECT_URL}" -O /opt/kubernetes.tar.gz
        echo "Unpacking release"
        rm -rf /opt/kubernetes || false
        tar xzf /opt/kubernetes.tar.gz -C /opt/
      else
        echo "kubernetes release found. Skipping download."
      fi

coreos:
  etcd:
    name: kubernetes-minion-INDEX
    discovery: https://discovery.etcd.io/DISCOVERY_ID
    addr: $private_ipv4:4001
    peer-addr: $private_ipv4:7001
    peer-bind-addr: $private_ipv4:7001

  fleet:
    public-ip: $private_ipv4
    metadata: kubernetes_role=minion

  update:
    reboot-strategy: etcd-lock

  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: flanneld.service
      command: start
      drop-ins:
      - name: 50-network-config.conf
        content: |
          [Service]
          ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "10.240.0.0/16", "Backend": {"Type": "host-gw"}}'
          ExecStart=
          ExecStart=/usr/libexec/sdnotify-proxy /run/flannel/sd.sock \
            /usr/bin/docker run --net=host --privileged=true --rm \
              --volume=/run/flannel:/run/flannel \
              --env=NOTIFY_SOCKET=/run/flannel/sd.sock \
              --env-file=/run/flannel/options.env \
              --volume=${ETCD_SSL_DIR}:/etc/ssl/etcd:ro \
              quay.io/coreos/flannel:${FLANNEL_VER} /opt/bin/flanneld -etcd-endpoints http://127.0.0.1:4001 --ip-masq=true --iface=eth2
    - name: docker.service
      command: start
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            # making sure that flanneld finished startup, otherwise containers
            # won't land in flannel's network...
            Requires=flanneld.service
            After=flanneld.service
    - name: download-release.service
      command: start
      content: |
        [Unit]
        Description=Downloads Kubernetes Release
        After=network-online.target
        Requires=network-online.target
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/bash /opt/bin/download-release.sh
    - name: minion-kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        After=network-online.target
        Requires=network-online.target
        After=docker.service
        Requires=docker.service
        After=download-release.service
        Requires=download-release.service
        [Service]
        EnvironmentFile=/run/kubelet/apiservers.env
        ExecStartPre=/usr/bin/ln -sf /opt/kubernetes/server/bin/kubelet /opt/bin/kubelet
        ExecStart=/opt/bin/kubelet --address=$private_ipv4 --hostname_override=$private_ipv4 --api_servers=${FIRST_APISERVER_URL} --logtostderr=true --config=/opt/kubernetes-manifests --cluster_dns=DNS_SERVER_IP --cluster_domain=DNS_DOMAIN
        Restart=always
        RestartSec=2
    - name: minion-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        After=network-online.target
        Requires=network-online.target
        After=docker.service
        Requires=docker.service
        After=download-release.service
        Requires=download-release.service
        [Service]
        EnvironmentFile=/run/kubelet/apiservers.env
        ExecStartPre=/usr/bin/ln -sf /opt/kubernetes/server/bin/kube-proxy /opt/bin/kube-proxy
        ExecStart=/opt/bin/kube-proxy --bind_address=$private_ipv4 --master=${FIRST_APISERVER_URL} --logtostderr=true
        Restart=always
        RestartSec=2
    - name: kubelet-sighup.path
      command: start
      content: |
        [Path]
        PathChanged=/run/kubelet/apiservers.env
    - name: kubelet-sighup.service
      command: start
      content: |
        [Service]
        ExecStart=/usr/bin/pkill -SIGHUP -f kubelet
    - name: kube-proxy-sighup.path
      command: start
      content: |
        [Path]
        PathChanged=/run/kubelet/apiservers.env
    - name: kube-proxy-sighup.service
      command: start
      content: |
        [Service]
        ExecStart=/usr/bin/pkill -SIGHUP -f kube-proxy
    - name: minion-advertiser.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Minion Advertiser
        After=etcd.service
        Requires=etcd.service
        After=minion-kubelet.service
        [Service]
        ExecStart=/bin/sh -c 'while :; do etcdctl set /corekube/minions/$private_ipv4 $private_ipv4 --ttl 300; sleep 120; done'
        Restart=always
        RestartSec=120
    - name: apiserver-finder.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Apiserver finder
        After=network-online.target
        Requires=network-online.target
        After=etcd.service
        Requires=etcd.service
        [Service]
        ExecStartPre=/opt/bin/regen-apiserver-list.sh
        ExecStart=/usr/bin/etcdctl exec-watch --recursive /corekube/apiservers -- /opt/bin/regen-apiserver-list.sh
        Restart=always
        RestartSec=30
    - name: cbr0.netdev
      command: start
      content: |
        [NetDev]
        Kind=bridge
        Name=cbr0
    - name: cbr0.network
      command: start
      content: |
        [Match]
        Name=cbr0

        [Network]
        Address=10.240.INDEX.1/24
    - name: nat.service
      command: start
      content: |
        [Unit]
        Description=NAT container->outside traffic

        [Service]
        ExecStart=/usr/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 10.240.INDEX.0/24 -j MASQUERADE
        ExecStart=/usr/sbin/iptables -t nat -A POSTROUTING -o eth1 -s 10.240.INDEX.0/24 -j MASQUERADE
        RemainAfterExit=yes
        Type=oneshot
